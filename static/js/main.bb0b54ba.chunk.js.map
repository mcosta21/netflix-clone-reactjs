{"version":3,"sources":["Tmdb.js","components/MovieRow/index.js","components/FeaturedMovie/index.js","components/Header/index.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","poster_path","alt","original_title","src","FeaturedMovie","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","Header","black","App","featuredData","setFeaturedData","movieList","setMovieList","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","movieChosen","movieChosenData","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","target","rel","role","aria-label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb0b54ba.chunk.js","sourcesContent":["const API_KEY = 'b9183c5c2d36811f09ae74cc21f99e94';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\n/*\r\n    - Originais da Netflix\r\n    - Recomendados (Trending)\r\n    - Em alta (Top rated)\r\n    - Ação\r\n    - Comédia\r\n    - Terror\r\n    - Romance\r\n    - Documentários\r\n*/\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            }, \r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n        ]\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if(movieId){\r\n            switch(type){\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                default: \r\n                    info = null;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport './styles.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nfunction MovieRow( { title, items } ) {\r\n\r\n  const [scrollX, setScrollX] = useState(-400);\r\n\r\n  const handleLeftArrow = () => {\r\n    let x = scrollX + Math.round(window.innerWidth / 2);\r\n    if(x > 0){\r\n        x = 0;  \r\n    }\r\n    setScrollX(x);\r\n  }\r\n\r\n  const handleRightArrow = () => {\r\n    let x = scrollX - Math.round(window.innerWidth / 2);\r\n    let listW = items.results.length * 200;\r\n    if((window.innerWidth - listW) > x){\r\n        x = (window.innerWidth - listW) - 80;  \r\n    }\r\n    setScrollX(x);\r\n  }\r\n\r\n  return (\r\n    <div className=\"movieRow\">\r\n        <h2>{title}</h2>\r\n\r\n        <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n          <NavigateBeforeIcon style={{fontSize: 50}}/>\r\n        </div>\r\n\r\n        <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n          <NavigateNextIcon style={{fontSize: 50}}/>\r\n        </div>\r\n\r\n        <div className=\"movieRow--listarea\">\r\n          <div \r\n            className=\"movieRow--list\"\r\n            style={{\r\n              marginLeft: scrollX,\r\n              width: items.results.length * 200\r\n            }}\r\n          >\r\n            {\r\n              items.results.length > 0 &&\r\n              items.results.map((item, key) => (\r\n                  \r\n                item.poster_path !== null &&\r\n                    <div key={key} className=\"movieRow--item\">\r\n\r\n                        <img alt={item.original_title} src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} />\r\n\r\n                    </div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieRow;\r\n","import React from 'react';\r\nimport './styles.css';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nfunction FeaturedMovie( { item } ) {\r\n\r\n  let firstDate = new Date(item.first_air_date);\r\n  let genres = [];\r\n  for(let i in item.genres){\r\n    genres.push(item.genres[i].name);\r\n  }\r\n  let description = item.overview.length > 200 ? item.overview.substring(0, 200) + '...' : item.overview;\r\n\r\n  return (\r\n    <section \r\n        className=\"featured\" \r\n        style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}\r\n    >\r\n        <div className=\"featured--vertical\">\r\n            <div className=\"featured--horizontal\">\r\n                <div className=\"featured--name\">{item.original_name}</div>\r\n                \r\n                <div className=\"featured--info\">\r\n                    <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                    <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                    <div className=\"featured--seasons\">{item.number_of_seasons} temperatura{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                </div>\r\n\r\n                <div className=\"featured--description\">{description}</div>\r\n                <div className=\"featured--buttons\">\r\n                    <a className=\"featured--watchbutton\" href={`/watch/${item.id}`}><div><PlayArrowIcon /> Assitir</div></a>\r\n                    <a className=\"featured--mylistbutton\" href={`/list/add/${item.id}`}><div><AddIcon />Minha Lista</div></a>\r\n                </div>\r\n                <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join(', ')}</div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default FeaturedMovie;\r\n","import React from 'react';\r\nimport './styles.css';\r\n\r\nfunction Header( { black } ) {\r\n  return (\r\n    <header className={black ? 'black' : ''}>\r\n        <div className=\"header--logo\">\r\n          <a href=\"/\">\r\n            <img alt=\"Netflix\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1280px-Netflix_2015_logo.svg.png\" />\r\n          </a>  \r\n          <div>\r\n            Clone\r\n          </div>\r\n        </div>\r\n        <div className=\"header--user\">\r\n          <a href=\"/\">\r\n            <img alt=\"Usuário\" src=\"https://learning.royalbcmuseum.bc.ca/wp-content/uploads/2014/07/netflix-face.jpg\" />\r\n          </a>\r\n        </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\nimport './App.css';\n\nfunction App() {\n\n  const [featuredData, setFeaturedData] = useState(null);\n  const [movieList, setMovieList] = useState([]);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let movieChosen = originals[0].items.results[randomChosen];\n      \n      let movieChosenData = await Tmdb.getMovieInfo(movieChosen.id, 'tv');\n      setFeaturedData(movieChosenData);\n    }\n\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true);\n      }\n      else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n\n  }, []);\n\n  return (\n    <div className=\"page\">\n      \n      <Header black={blackHeader}/>\n\n      {\n        featuredData &&\n        <FeaturedMovie item={featuredData}/>\n      }\n      \n\n      <section className=\"lists\">\n        {\n          movieList.map((item, key) => (\n            <MovieRow key={key} title={item.title} items={item.items} />\n          ))\n        }\n      </section>\n\n      <footer>\n        <div>\n          <a href=\"https://www.netflix.com/br/\" target=\"_blank\" rel=\"noopener noreferrer\">\n           <img alt=\"Netflix\" width=\"18\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Netflix_2015_N_logo.svg/1200px-Netflix_2015_N_logo.svg.png\"/>\n          </a>\n          <a href=\"https://www.themoviedb.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img alt=\"Themoviedb.org\" width=\"42\" src=\"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_square_2-d537fb228cf3ded904ef09b136fe3fec72548ebc1fea3fbbd1ad9e36364db38b.svg\"/>\n          </a>\n        </div>\n        Feito com <span role=\"img\" aria-label=\"Coração\">❤️ por <a href=\"https://github.com/mcosta21\" target=\"_blank\" rel=\"noopener noreferrer\">Marcio Costa</a></span>\n      </footer>\n      \n      {\n        movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img alt=\"Carregando\" src=\"https://media.wired.com/photos/592744d3f3e2356fd800bf00/master/w_2000,c_limit/Netflix_LoadTime.gif\"/>\n        </div>\n      }      \n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}